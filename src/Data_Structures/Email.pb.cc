// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Data_Structures/Email.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace EnronProject {

namespace {

const ::google::protobuf::Descriptor* Email_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Email_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Data_5fStructures_2fEmail_2eproto() {
  protobuf_AddDesc_Data_5fStructures_2fEmail_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Data_Structures/Email.proto");
  GOOGLE_CHECK(file != NULL);
  Email_descriptor_ = file->message_type(0);
  static const int Email_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Email, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Email, receiver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Email, header_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Email, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Email, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Email, folder_metadata_),
  };
  Email_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Email_descriptor_,
      Email::default_instance_,
      Email_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Email, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Email, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Email));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Data_5fStructures_2fEmail_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Email_descriptor_, &Email::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Data_5fStructures_2fEmail_2eproto() {
  delete Email::default_instance_;
  delete Email_reflection_;
}

void protobuf_AddDesc_Data_5fStructures_2fEmail_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033Data_Structures/Email.proto\022\014EnronProj"
    "ect\"t\n\005Email\022\016\n\006sender\030\001 \002(\t\022\020\n\010receiver"
    "\030\002 \003(\t\022\022\n\nheader_tag\030\003 \003(\t\022\016\n\006header\030\004 \002"
    "(\t\022\014\n\004body\030\005 \002(\t\022\027\n\017folder_metadata\030\006 \002("
    "\t", 161);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Data_Structures/Email.proto", &protobuf_RegisterTypes);
  Email::default_instance_ = new Email();
  Email::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Data_5fStructures_2fEmail_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Data_5fStructures_2fEmail_2eproto {
  StaticDescriptorInitializer_Data_5fStructures_2fEmail_2eproto() {
    protobuf_AddDesc_Data_5fStructures_2fEmail_2eproto();
  }
} static_descriptor_initializer_Data_5fStructures_2fEmail_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Email::kSenderFieldNumber;
const int Email::kReceiverFieldNumber;
const int Email::kHeaderTagFieldNumber;
const int Email::kHeaderFieldNumber;
const int Email::kBodyFieldNumber;
const int Email::kFolderMetadataFieldNumber;
#endif  // !_MSC_VER

Email::Email()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Email::InitAsDefaultInstance() {
}

Email::Email(const Email& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Email::SharedCtor() {
  _cached_size_ = 0;
  sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  header_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  folder_metadata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Email::~Email() {
  SharedDtor();
}

void Email::SharedDtor() {
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_;
  }
  if (header_ != &::google::protobuf::internal::kEmptyString) {
    delete header_;
  }
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (folder_metadata_ != &::google::protobuf::internal::kEmptyString) {
    delete folder_metadata_;
  }
  if (this != default_instance_) {
  }
}

void Email::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Email::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Email_descriptor_;
}

const Email& Email::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Data_5fStructures_2fEmail_2eproto();  return *default_instance_;
}

Email* Email::default_instance_ = NULL;

Email* Email::New() const {
  return new Email;
}

void Email::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sender()) {
      if (sender_ != &::google::protobuf::internal::kEmptyString) {
        sender_->clear();
      }
    }
    if (has_header()) {
      if (header_ != &::google::protobuf::internal::kEmptyString) {
        header_->clear();
      }
    }
    if (has_body()) {
      if (body_ != &::google::protobuf::internal::kEmptyString) {
        body_->clear();
      }
    }
    if (has_folder_metadata()) {
      if (folder_metadata_ != &::google::protobuf::internal::kEmptyString) {
        folder_metadata_->clear();
      }
    }
  }
  receiver_.Clear();
  header_tag_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Email::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sender = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sender().data(), this->sender().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_receiver;
        break;
      }
      
      // repeated string receiver = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_receiver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_receiver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->receiver(0).data(), this->receiver(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_receiver;
        if (input->ExpectTag(26)) goto parse_header_tag;
        break;
      }
      
      // repeated string header_tag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_header_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->header_tag(0).data(), this->header_tag(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_header_tag;
        if (input->ExpectTag(34)) goto parse_header;
        break;
      }
      
      // required string header = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_header()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->header().data(), this->header().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_body;
        break;
      }
      
      // required string body = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->body().data(), this->body().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_folder_metadata;
        break;
      }
      
      // required string folder_metadata = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_folder_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_folder_metadata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->folder_metadata().data(), this->folder_metadata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Email::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string sender = 1;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sender(), output);
  }
  
  // repeated string receiver = 2;
  for (int i = 0; i < this->receiver_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->receiver(i).data(), this->receiver(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->receiver(i), output);
  }
  
  // repeated string header_tag = 3;
  for (int i = 0; i < this->header_tag_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->header_tag(i).data(), this->header_tag(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->header_tag(i), output);
  }
  
  // required string header = 4;
  if (has_header()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->header().data(), this->header().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->header(), output);
  }
  
  // required string body = 5;
  if (has_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->body().data(), this->body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->body(), output);
  }
  
  // required string folder_metadata = 6;
  if (has_folder_metadata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->folder_metadata().data(), this->folder_metadata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->folder_metadata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Email::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string sender = 1;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sender(), target);
  }
  
  // repeated string receiver = 2;
  for (int i = 0; i < this->receiver_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receiver(i).data(), this->receiver(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->receiver(i), target);
  }
  
  // repeated string header_tag = 3;
  for (int i = 0; i < this->header_tag_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->header_tag(i).data(), this->header_tag(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->header_tag(i), target);
  }
  
  // required string header = 4;
  if (has_header()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->header().data(), this->header().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->header(), target);
  }
  
  // required string body = 5;
  if (has_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->body().data(), this->body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->body(), target);
  }
  
  // required string folder_metadata = 6;
  if (has_folder_metadata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->folder_metadata().data(), this->folder_metadata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->folder_metadata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Email::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sender = 1;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender());
    }
    
    // required string header = 4;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->header());
    }
    
    // required string body = 5;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->body());
    }
    
    // required string folder_metadata = 6;
    if (has_folder_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->folder_metadata());
    }
    
  }
  // repeated string receiver = 2;
  total_size += 1 * this->receiver_size();
  for (int i = 0; i < this->receiver_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->receiver(i));
  }
  
  // repeated string header_tag = 3;
  total_size += 1 * this->header_tag_size();
  for (int i = 0; i < this->header_tag_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->header_tag(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Email::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Email* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Email*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Email::MergeFrom(const Email& from) {
  GOOGLE_CHECK_NE(&from, this);
  receiver_.MergeFrom(from.receiver_);
  header_tag_.MergeFrom(from.header_tag_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender()) {
      set_sender(from.sender());
    }
    if (from.has_header()) {
      set_header(from.header());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
    if (from.has_folder_metadata()) {
      set_folder_metadata(from.folder_metadata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Email::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Email::CopyFrom(const Email& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Email::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000039) != 0x00000039) return false;
  
  return true;
}

void Email::Swap(Email* other) {
  if (other != this) {
    std::swap(sender_, other->sender_);
    receiver_.Swap(&other->receiver_);
    header_tag_.Swap(&other->header_tag_);
    std::swap(header_, other->header_);
    std::swap(body_, other->body_);
    std::swap(folder_metadata_, other->folder_metadata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Email::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Email_descriptor_;
  metadata.reflection = Email_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace EnronProject

// @@protoc_insertion_point(global_scope)
