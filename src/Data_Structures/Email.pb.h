// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Data_Structures/Email.proto

#ifndef PROTOBUF_Data_5fStructures_2fEmail_2eproto__INCLUDED
#define PROTOBUF_Data_5fStructures_2fEmail_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace EnronProject {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Data_5fStructures_2fEmail_2eproto();
void protobuf_AssignDesc_Data_5fStructures_2fEmail_2eproto();
void protobuf_ShutdownFile_Data_5fStructures_2fEmail_2eproto();

class Email;

// ===================================================================

class Email : public ::google::protobuf::Message {
 public:
  Email();
  virtual ~Email();
  
  Email(const Email& from);
  
  inline Email& operator=(const Email& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Email& default_instance();
  
  void Swap(Email* other);
  
  // implements Message ----------------------------------------------
  
  Email* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Email& from);
  void MergeFrom(const Email& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string sender = 1;
  inline bool has_sender() const;
  inline void clear_sender();
  static const int kSenderFieldNumber = 1;
  inline const ::std::string& sender() const;
  inline void set_sender(const ::std::string& value);
  inline void set_sender(const char* value);
  inline void set_sender(const char* value, size_t size);
  inline ::std::string* mutable_sender();
  inline ::std::string* release_sender();
  
  // repeated string receiver = 2;
  inline int receiver_size() const;
  inline void clear_receiver();
  static const int kReceiverFieldNumber = 2;
  inline const ::std::string& receiver(int index) const;
  inline ::std::string* mutable_receiver(int index);
  inline void set_receiver(int index, const ::std::string& value);
  inline void set_receiver(int index, const char* value);
  inline void set_receiver(int index, const char* value, size_t size);
  inline ::std::string* add_receiver();
  inline void add_receiver(const ::std::string& value);
  inline void add_receiver(const char* value);
  inline void add_receiver(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& receiver() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_receiver();
  
  // repeated string header_tag = 3;
  inline int header_tag_size() const;
  inline void clear_header_tag();
  static const int kHeaderTagFieldNumber = 3;
  inline const ::std::string& header_tag(int index) const;
  inline ::std::string* mutable_header_tag(int index);
  inline void set_header_tag(int index, const ::std::string& value);
  inline void set_header_tag(int index, const char* value);
  inline void set_header_tag(int index, const char* value, size_t size);
  inline ::std::string* add_header_tag();
  inline void add_header_tag(const ::std::string& value);
  inline void add_header_tag(const char* value);
  inline void add_header_tag(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& header_tag() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_header_tag();
  
  // required string header = 4;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 4;
  inline const ::std::string& header() const;
  inline void set_header(const ::std::string& value);
  inline void set_header(const char* value);
  inline void set_header(const char* value, size_t size);
  inline ::std::string* mutable_header();
  inline ::std::string* release_header();
  
  // required string body = 5;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 5;
  inline const ::std::string& body() const;
  inline void set_body(const ::std::string& value);
  inline void set_body(const char* value);
  inline void set_body(const char* value, size_t size);
  inline ::std::string* mutable_body();
  inline ::std::string* release_body();
  
  // required string folder_metadata = 6;
  inline bool has_folder_metadata() const;
  inline void clear_folder_metadata();
  static const int kFolderMetadataFieldNumber = 6;
  inline const ::std::string& folder_metadata() const;
  inline void set_folder_metadata(const ::std::string& value);
  inline void set_folder_metadata(const char* value);
  inline void set_folder_metadata(const char* value, size_t size);
  inline ::std::string* mutable_folder_metadata();
  inline ::std::string* release_folder_metadata();
  
  // @@protoc_insertion_point(class_scope:EnronProject.Email)
 private:
  inline void set_has_sender();
  inline void clear_has_sender();
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_body();
  inline void clear_has_body();
  inline void set_has_folder_metadata();
  inline void clear_has_folder_metadata();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* sender_;
  ::google::protobuf::RepeatedPtrField< ::std::string> receiver_;
  ::google::protobuf::RepeatedPtrField< ::std::string> header_tag_;
  ::std::string* header_;
  ::std::string* body_;
  ::std::string* folder_metadata_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_Data_5fStructures_2fEmail_2eproto();
  friend void protobuf_AssignDesc_Data_5fStructures_2fEmail_2eproto();
  friend void protobuf_ShutdownFile_Data_5fStructures_2fEmail_2eproto();
  
  void InitAsDefaultInstance();
  static Email* default_instance_;
};
// ===================================================================


// ===================================================================

// Email

// required string sender = 1;
inline bool Email::has_sender() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Email::set_has_sender() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Email::clear_has_sender() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Email::clear_sender() {
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    sender_->clear();
  }
  clear_has_sender();
}
inline const ::std::string& Email::sender() const {
  return *sender_;
}
inline void Email::set_sender(const ::std::string& value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
}
inline void Email::set_sender(const char* value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
}
inline void Email::set_sender(const char* value, size_t size) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  sender_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Email::mutable_sender() {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  return sender_;
}
inline ::std::string* Email::release_sender() {
  clear_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sender_;
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string receiver = 2;
inline int Email::receiver_size() const {
  return receiver_.size();
}
inline void Email::clear_receiver() {
  receiver_.Clear();
}
inline const ::std::string& Email::receiver(int index) const {
  return receiver_.Get(index);
}
inline ::std::string* Email::mutable_receiver(int index) {
  return receiver_.Mutable(index);
}
inline void Email::set_receiver(int index, const ::std::string& value) {
  receiver_.Mutable(index)->assign(value);
}
inline void Email::set_receiver(int index, const char* value) {
  receiver_.Mutable(index)->assign(value);
}
inline void Email::set_receiver(int index, const char* value, size_t size) {
  receiver_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Email::add_receiver() {
  return receiver_.Add();
}
inline void Email::add_receiver(const ::std::string& value) {
  receiver_.Add()->assign(value);
}
inline void Email::add_receiver(const char* value) {
  receiver_.Add()->assign(value);
}
inline void Email::add_receiver(const char* value, size_t size) {
  receiver_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Email::receiver() const {
  return receiver_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Email::mutable_receiver() {
  return &receiver_;
}

// repeated string header_tag = 3;
inline int Email::header_tag_size() const {
  return header_tag_.size();
}
inline void Email::clear_header_tag() {
  header_tag_.Clear();
}
inline const ::std::string& Email::header_tag(int index) const {
  return header_tag_.Get(index);
}
inline ::std::string* Email::mutable_header_tag(int index) {
  return header_tag_.Mutable(index);
}
inline void Email::set_header_tag(int index, const ::std::string& value) {
  header_tag_.Mutable(index)->assign(value);
}
inline void Email::set_header_tag(int index, const char* value) {
  header_tag_.Mutable(index)->assign(value);
}
inline void Email::set_header_tag(int index, const char* value, size_t size) {
  header_tag_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Email::add_header_tag() {
  return header_tag_.Add();
}
inline void Email::add_header_tag(const ::std::string& value) {
  header_tag_.Add()->assign(value);
}
inline void Email::add_header_tag(const char* value) {
  header_tag_.Add()->assign(value);
}
inline void Email::add_header_tag(const char* value, size_t size) {
  header_tag_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Email::header_tag() const {
  return header_tag_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Email::mutable_header_tag() {
  return &header_tag_;
}

// required string header = 4;
inline bool Email::has_header() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Email::set_has_header() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Email::clear_has_header() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Email::clear_header() {
  if (header_ != &::google::protobuf::internal::kEmptyString) {
    header_->clear();
  }
  clear_has_header();
}
inline const ::std::string& Email::header() const {
  return *header_;
}
inline void Email::set_header(const ::std::string& value) {
  set_has_header();
  if (header_ == &::google::protobuf::internal::kEmptyString) {
    header_ = new ::std::string;
  }
  header_->assign(value);
}
inline void Email::set_header(const char* value) {
  set_has_header();
  if (header_ == &::google::protobuf::internal::kEmptyString) {
    header_ = new ::std::string;
  }
  header_->assign(value);
}
inline void Email::set_header(const char* value, size_t size) {
  set_has_header();
  if (header_ == &::google::protobuf::internal::kEmptyString) {
    header_ = new ::std::string;
  }
  header_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Email::mutable_header() {
  set_has_header();
  if (header_ == &::google::protobuf::internal::kEmptyString) {
    header_ = new ::std::string;
  }
  return header_;
}
inline ::std::string* Email::release_header() {
  clear_has_header();
  if (header_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = header_;
    header_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string body = 5;
inline bool Email::has_body() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Email::set_has_body() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Email::clear_has_body() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Email::clear_body() {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    body_->clear();
  }
  clear_has_body();
}
inline const ::std::string& Email::body() const {
  return *body_;
}
inline void Email::set_body(const ::std::string& value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void Email::set_body(const char* value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void Email::set_body(const char* value, size_t size) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Email::mutable_body() {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  return body_;
}
inline ::std::string* Email::release_body() {
  clear_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = body_;
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string folder_metadata = 6;
inline bool Email::has_folder_metadata() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Email::set_has_folder_metadata() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Email::clear_has_folder_metadata() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Email::clear_folder_metadata() {
  if (folder_metadata_ != &::google::protobuf::internal::kEmptyString) {
    folder_metadata_->clear();
  }
  clear_has_folder_metadata();
}
inline const ::std::string& Email::folder_metadata() const {
  return *folder_metadata_;
}
inline void Email::set_folder_metadata(const ::std::string& value) {
  set_has_folder_metadata();
  if (folder_metadata_ == &::google::protobuf::internal::kEmptyString) {
    folder_metadata_ = new ::std::string;
  }
  folder_metadata_->assign(value);
}
inline void Email::set_folder_metadata(const char* value) {
  set_has_folder_metadata();
  if (folder_metadata_ == &::google::protobuf::internal::kEmptyString) {
    folder_metadata_ = new ::std::string;
  }
  folder_metadata_->assign(value);
}
inline void Email::set_folder_metadata(const char* value, size_t size) {
  set_has_folder_metadata();
  if (folder_metadata_ == &::google::protobuf::internal::kEmptyString) {
    folder_metadata_ = new ::std::string;
  }
  folder_metadata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Email::mutable_folder_metadata() {
  set_has_folder_metadata();
  if (folder_metadata_ == &::google::protobuf::internal::kEmptyString) {
    folder_metadata_ = new ::std::string;
  }
  return folder_metadata_;
}
inline ::std::string* Email::release_folder_metadata() {
  clear_has_folder_metadata();
  if (folder_metadata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = folder_metadata_;
    folder_metadata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace EnronProject

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Data_5fStructures_2fEmail_2eproto__INCLUDED
